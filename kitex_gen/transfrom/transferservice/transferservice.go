// Code generated by Kitex v0.5.2. DO NOT EDIT.

package transferservice

import (
	"context"
	"fmt"
	transfrom "github.com/aesoper101/kitextest/kitex_gen/transfrom"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return transferServiceServiceInfo
}

var transferServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "TransferService"
	handlerType := (*transfrom.TransferService)(nil)
	methods := map[string]kitex.MethodInfo{
		"TransIn":  kitex.NewMethodInfo(transInHandler, newTransInArgs, newTransInResult, false),
		"TransOut": kitex.NewMethodInfo(transOutHandler, newTransOutArgs, newTransOutResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "tests",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.5.2",
		Extra:           extra,
	}
	return svcInfo
}

func transInHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(transfrom.TransferRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(transfrom.TransferService).TransIn(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *TransInArgs:
		success, err := handler.(transfrom.TransferService).TransIn(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*TransInResult)
		realResult.Success = success
	}
	return nil
}
func newTransInArgs() interface{} {
	return &TransInArgs{}
}

func newTransInResult() interface{} {
	return &TransInResult{}
}

type TransInArgs struct {
	Req *transfrom.TransferRequest
}

func (p *TransInArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in TransInArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *TransInArgs) Unmarshal(in []byte) error {
	msg := new(transfrom.TransferRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var TransInArgs_Req_DEFAULT *transfrom.TransferRequest

func (p *TransInArgs) GetReq() *transfrom.TransferRequest {
	if !p.IsSetReq() {
		return TransInArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *TransInArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *TransInArgs) GetFirstArgument() interface{} {
	return p.Req
}

type TransInResult struct {
	Success *transfrom.Message
}

var TransInResult_Success_DEFAULT *transfrom.Message

func (p *TransInResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in TransInResult")
	}
	return proto.Marshal(p.Success)
}

func (p *TransInResult) Unmarshal(in []byte) error {
	msg := new(transfrom.Message)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *TransInResult) GetSuccess() *transfrom.Message {
	if !p.IsSetSuccess() {
		return TransInResult_Success_DEFAULT
	}
	return p.Success
}

func (p *TransInResult) SetSuccess(x interface{}) {
	p.Success = x.(*transfrom.Message)
}

func (p *TransInResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TransInResult) GetResult() interface{} {
	return p.Success
}

func transOutHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(transfrom.TransferRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(transfrom.TransferService).TransOut(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *TransOutArgs:
		success, err := handler.(transfrom.TransferService).TransOut(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*TransOutResult)
		realResult.Success = success
	}
	return nil
}
func newTransOutArgs() interface{} {
	return &TransOutArgs{}
}

func newTransOutResult() interface{} {
	return &TransOutResult{}
}

type TransOutArgs struct {
	Req *transfrom.TransferRequest
}

func (p *TransOutArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in TransOutArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *TransOutArgs) Unmarshal(in []byte) error {
	msg := new(transfrom.TransferRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var TransOutArgs_Req_DEFAULT *transfrom.TransferRequest

func (p *TransOutArgs) GetReq() *transfrom.TransferRequest {
	if !p.IsSetReq() {
		return TransOutArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *TransOutArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *TransOutArgs) GetFirstArgument() interface{} {
	return p.Req
}

type TransOutResult struct {
	Success *transfrom.Message
}

var TransOutResult_Success_DEFAULT *transfrom.Message

func (p *TransOutResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in TransOutResult")
	}
	return proto.Marshal(p.Success)
}

func (p *TransOutResult) Unmarshal(in []byte) error {
	msg := new(transfrom.Message)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *TransOutResult) GetSuccess() *transfrom.Message {
	if !p.IsSetSuccess() {
		return TransOutResult_Success_DEFAULT
	}
	return p.Success
}

func (p *TransOutResult) SetSuccess(x interface{}) {
	p.Success = x.(*transfrom.Message)
}

func (p *TransOutResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TransOutResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) TransIn(ctx context.Context, Req *transfrom.TransferRequest) (r *transfrom.Message, err error) {
	var _args TransInArgs
	_args.Req = Req
	var _result TransInResult
	if err = p.c.Call(ctx, "TransIn", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) TransOut(ctx context.Context, Req *transfrom.TransferRequest) (r *transfrom.Message, err error) {
	var _args TransOutArgs
	_args.Req = Req
	var _result TransOutResult
	if err = p.c.Call(ctx, "TransOut", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
